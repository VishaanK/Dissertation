# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '3.7'

volumes:
  orderer.example.com:
  peer0.org1.example.com:
  peer1.org1.example.com:
  peer2.org1.example.com:
  api:
  database:


networks:
  test:
    name: fabric_test

  api_db:
    name: api_db

  bridge_network:
    name: bridge_network
    

services:
  orderer.example.com:
    container_name: orderer.example.com
    image: hyperledger/fabric-orderer:3.0
    labels:
      service: hyperledger-fabric
    environment:
      - FABRIC_CFG_PATH=/etc/hyperledger/ordererConfig
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/orderer/tls/ca.crt]
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/etc/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/etc/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/etc/hyperledger/orderer/tls/ca.crt]
      - ORDERER_GENERAL_BOOTSTRAPMETHOD=none
      - ORDERER_CHANNELPARTICIPATION_ENABLED=true
      - ORDERER_ADMIN_TLS_ENABLED=true
      - ORDERER_ADMIN_TLS_CERTIFICATE=/etc/hyperledger/orderer/tls/server.crt
      - ORDERER_ADMIN_TLS_PRIVATEKEY=/etc/hyperledger/orderer/tls/server.key
      - ORDERER_ADMIN_TLS_ROOTCAS=[/etc/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_TLS_CLIENTROOTCAS=[/etc/hyperledger/orderer/tls/ca.crt]
      - ORDERER_ADMIN_LISTENADDRESS=0.0.0.0:7053
      - ORDERER_OPERATIONS_LISTENADDRESS=orderer.example.com:9443
      - ORDERER_METRICS_PROVIDER=prometheus
      - OSN_TLS_CA_ROOT_CERT=/etc/hyperledger/orderer/tls/ca.crt
      #timeout settings 
      - ORDERER_GENERAL_SERVERTIMEOUT=60s  # Timeout for gRPC server
      #admin credentials
      - ADMIN_TLS_SIGN_CERT=/etc/hyperledger/admin/tls/client.crt
      - ADMIN_TLS_PRIVATE_KEY=/etc/hyperledger/admin/tls/client.key
    working_dir: /root
    command: orderer 
    volumes:
      - ../organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/:/etc/hyperledger/orderer/msp
      - ../organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/etc/hyperledger/orderer/tls
      - orderer.example.com:/var/hyperledger/production/orderer
      - ../config/orderer.yaml:/etc/hyperledger/fabric/orderer.yaml
      - ../channel-artifacts/:/etc/hyperledger/fabric/genesisblocks
      - ../organizations/ordererOrganizations/example.com/users/Admin@example.com/:/etc/hyperledger/admin
      - ../bin/:/usr/local/bin/
    ports:
      - 7050:7050
      - 7053:7053
      - 9443:9443
    networks:
      - test
     

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    image: hyperledger/fabric-peer:3.0
    labels:
      service: hyperledger-fabric
    environment:
      - FABRIC_CFG_PATH=/etc/hyperledger/peercfg
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      
      # Peer specific variables
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      #- CORE_PEER_GOSSIP_BOOTSTRAP=""
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/org1.example.com/peers/peer0.org1.example.com/msp
      - CORE_OPERATIONS_LISTENADDRESS=peer0.org1.example.com:9444
      - CORE_PEER_CLIENT_CONN_TIMEOUT=30s
      - CORE_METRICS_PROVIDER=prometheus
      - CHAINCODE_AS_A_SERVICE_BUILDER_CONFIG={"peername":"peer0org1"}
      - CORE_CHAINCODE_EXECUTETIMEOUT=300s
      - DOCKER_SOCK=/var/run/docker.sock
      - CORE_CHAINCODE_JAVA_RUNTIME=hyperledger/fabric-javaenv:2.5.4
      - ORDERER_CA_FILE=/etc/hyperledger/fabric/orderer/msp/tlscacerts/tlsca.example.com-cert.pem

      - ADMIN_TLS_SIGN_CERT=/etc/hyperledger/fabric/org1.example.com/users/Admin@org1.example.com/tls/client.crt
      - ADMIN_TLS_PRIVATE_KEY=/etc/hyperledger/fabric/org1.example.com/users/Admin@org1.example.com/tls/client.key
#      - REQUEST_TIMEOUT=60s

      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric_test
    volumes:

      - ../organizations/peerOrganizations:/etc/hyperledger/fabric
      - peer0.org1.example.com:/var/hyperledger/production
      - ../config:/etc/hyperledger/peercfg
      - ${DOCKER_SOCK}:/var/run/docker.sock 
      - ../organizations/ordererOrganizations/example.com:/etc/hyperledger/fabric/orderer

    working_dir: /root
    command: peer node start
    # peer channel fetch newest  channel1.block -c channel1 --orderer orderer.example.com:7050
    #peer channel join -b /etc/hyperledger/fabric/genesisblocks/genesis_block.pb
    ports:
      - 7051:7051
      - 9444:9444
    networks:
      - test
      - bridge_network
    

  peer1.org1.example.com:
    container_name: peer1.org1.example.com
    image: hyperledger/fabric-peer:3.0
    labels:
      service: hyperledger-fabric
    environment:
      - FABRIC_CFG_PATH=/etc/hyperledger/peercfg
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/org1.example.com/peers/peer1.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/org1.example.com/peers/peer1.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt
      # Peer specific variables
      - CORE_PEER_ID=peer1.org1.example.com
      - CORE_PEER_ADDRESS=peer1.org1.example.com:7060
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7060
      - CORE_PEER_CHAINCODEADDRESS=peer1.org1.example.com:7061
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7061
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7060
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/org1.example.com/peers/peer1.org1.example.com/msp
      - CORE_OPERATIONS_LISTENADDRESS=peer1.org1.example.com:9445
      - CORE_METRICS_PROVIDER=prometheus
      - CHAINCODE_AS_A_SERVICE_BUILDER_CONFIG={"peername":"peer1org1"}
      - CORE_CHAINCODE_EXECUTETIMEOUT=300s
      - ADMIN_TLS_SIGN_CERT=/etc/hyperledger/admin/tls/client.crt
      - ADMIN_TLS_PRIVATE_KEY=/etc/hyperledger/admin/tls/client.key
      - DOCKER_SOCK=/var/run/docker.sock
      - CORE_CHAINCODE_JAVA_RUNTIME=hyperledger/fabric-javaenv:2.5.4
      - ORDERER_CA_FILE=/etc/hyoerledger/fabric/orderer/msp/tlscacerts/tlsca.example.com-cert.pem
   #   - REQUEST_TIMEOUT=60s
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric_test
    volumes:
      - ../organizations/peerOrganizations:/etc/hyperledger/fabric
      - peer1.org1.example.com:/var/hyperledger/production
      - ../config:/etc/hyperledger/peercfg
      - ../organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/:/etc/hyperledger/admin
      - ${DOCKER_SOCK}:/var/run/docker.sock 
      - ../organizations/ordererOrganizations/example.com:/etc/hyperledger/fabric/orderer
    working_dir: /root
    command: peer node start
    ports:
      - 7060:7060
      - 9445:9445
    networks:
      - test
    depends_on:
    - peer0.org1.example.com

  peer2.org1.example.com:
    container_name: peer2.org1.example.com
    image: hyperledger/fabric-peer:3.0
    labels:
      service: hyperledger-fabric
    environment:
      - FABRIC_CFG_PATH=/etc/hyperledger/peercfg
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/org1.example.com/peers/peer2.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/org1.example.com/peers/peer2.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/org1.example.com/peers/peer2.org1.example.com/tls/ca.crt
      # Peer specific variables
      - CORE_PEER_ID=peer2.org1.example.com
      - CORE_PEER_ADDRESS=peer2.org1.example.com:7057
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7057
      - CORE_PEER_CHAINCODEADDRESS=peer2.org1.example.com:7058
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7058
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer2.org1.example.com:7057
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/org1.example.com/peers/peer2.org1.example.com/msp
      - CORE_OPERATIONS_LISTENADDRESS=peer2.org1.example.com:9446
      - CORE_METRICS_PROVIDER=prometheus
      - CHAINCODE_AS_A_SERVICE_BUILDER_CONFIG={"peername":"peer2org1"}
      - CORE_CHAINCODE_EXECUTETIMEOUT=300s
      - ADMIN_TLS_SIGN_CERT=/etc/hyperledger/admin/tls/client.crt
      - ADMIN_TLS_PRIVATE_KEY=/etc/hyperledger/admin/tls/client.key
      - DOCKER_SOCK=/var/run/docker.sock
      - CORE_CHAINCODE_JAVA_RUNTIME=hyperledger/fabric-javaenv:2.5.4
      - ORDERER_CA_FILE=/etc/hyoerledger/fabric/orderer/msp/tlscacerts/tlsca.example.com-cert.pem
     # - REQUEST_TIMEOUT=60s

      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric_test
    volumes:
      - ../organizations/peerOrganizations:/etc/hyperledger/fabric
      - peer2.org1.example.com:/var/hyperledger/production
      - ../config:/etc/hyperledger/peercfg
      - ../organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/:/etc/hyperledger/admin
      - ${DOCKER_SOCK}:/var/run/docker.sock 
      - ../organizations/ordererOrganizations/example.com:/etc/hyperledger/fabric/orderer
    working_dir: /root
    command: peer node start
    ports:
      - 7057:7057
      - 9446:9446
    networks:
      - test
    depends_on:
      - peer0.org1.example.com

  database:
    container_name: db_mongo
    image: mongo:latest
    restart: always
    labels:
      service: mongo_db

    environment:
      - MONGO_INITDB_ROOT_USERNAME:admin
      - MONGO_INITDB_ROOT_PASSWORD:password

    volumes:
      - database:/data
      - ../../db/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js

    ports:
      - 27017:27017
    networks:
      - api_db
  
#api needs to start after the db and the fabric network 
  api:
    build: 
      context: ../../api
      dockerfile: Dockerfile
    container_name: api
    
    labels:
      service: api_server
    environment:
      - MONGO_URL=mongodb://myuser:mypassword@database:27017/document_database
      - DATABASE_NAME=document_database
#ensure the api starts last so everything else can initialise before its startup 
    depends_on:
      - database
      - orderer.example.com
      - peer2.org1.example.com
      - peer1.org1.example.com
      - peer0.org1.example.com
    volumes:
      - api:/app
      - ../organizations:/app/organizations
    restart:
      always
    ports:
      - 3000:3000
    networks:
      - api_db
      - bridge_network
